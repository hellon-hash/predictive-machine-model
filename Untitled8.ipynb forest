{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPKXjd23DIDQGghdq+EcZTL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hellon-hash/predictive-machine-model/blob/main/Untitled8.ipynb%20forest\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "{\n",
        "  \"nbformat\": 4,\n",
        "  \"nbformat_minor\": 0,\n",
        "  \"metadata\": {\n",
        "    \"colab\": {\n",
        "      \"provenance\": []\n",
        "    },\n",
        "    \"kernelspec\": {\n",
        "      \"name\": \"python3\",\n",
        "      \"display_name\": \"Python 3\"\n",
        "    },\n",
        "    \"language_info\": {\n",
        "      \"name\": \"python\"\n",
        "    }\n",
        "  },\n",
        "  \"cells\": [\n",
        "    {\n",
        "      \"cell_type\": \"code\",\n",
        "      \"source\": [\n",
        "        \"from google.colab import drive\\n\",\n",
        "        \"drive.mount('/content/drive')\"\n",
        "      ],\n",
        "      \"metadata\": {\n",
        "        \"colab\": {\n",
        "          \"base_uri\": \"https://localhost:8080/\"\n",
        "        },\n",
        "        \"id\": \"FPqBTVuCP3sF\",\n",
        "        \"outputId\": \"031616de-ee21-4ddd-e033-54ef90d7c790\"\n",
        "      },\n",
        "      \"execution_count\": null,\n",
        "      \"outputs\": [\n",
        "        {\n",
        "          \"output_type\": \"stream\",\n",
        "          \"name\": \"stdout\",\n",
        "          \"text\": [\n",
        "            \"Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\\\"/content/drive\\\", force_remount=True).\\n\"\n",
        "          ]\n",
        "        }\n",
        "      ]\n",
        "    },\n",
        "    {\n",
        "      \"cell_type\": \"code\",\n",
        "      \"source\": [\n",
        "        \"import pandas as pd\\n\",\n",
        "        \"import seaborn as sns\\n\",\n",
        "        \"import matplotlib.pyplot as plt\\n\",\n",
        "        \"\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Load the dataset\\n\",\n",
        "        \"file_path = \\\"/content/drive/MyDrive/Real estate.csv\\\"\\n\",\n",
        "        \"real_estate_data = pd.read_csv(file_path)\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Display the first few rows of the dataset\\n\",\n",
        "        \"print(\\\"First few rows of the dataset:\\\")\\n\",\n",
        "        \"print(real_estate_data.head())\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Summary statistics of the dataset\\n\",\n",
        "        \"print(\\\"\\\\nSummary statistics of the dataset:\\\")\\n\",\n",
        "        \"print(real_estate_data.describe())\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Correlation matrix\\n\",\n",
        "        \"correlation_matrix = real_estate_data.corr()\\n\",\n",
        "        \"print(\\\"\\\\nCorrelation matrix:\\\")\\n\",\n",
        "        \"print(correlation_matrix)\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Visualizing correlations using a heatmap\\n\",\n",
        "        \"plt.figure(figsize=(10, 8))\\n\",\n",
        "        \"sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\\\".2f\\\")\\n\",\n",
        "        \"plt.title(\\\"Correlation Heatmap\\\")\\n\",\n",
        "        \"plt.show()\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Distribution of the target variable\\n\",\n",
        "        \"plt.figure(figsize=(8, 6))\\n\",\n",
        "        \"sns.histplot(real_estate_data['Y house price of unit area'], kde=True, color='blue')\\n\",\n",
        "        \"plt.title(\\\"Distribution of House Price of Unit Area\\\")\\n\",\n",
        "        \"plt.xlabel(\\\"House Price of Unit Area\\\")\\n\",\n",
        "        \"plt.ylabel(\\\"Frequency\\\")\\n\",\n",
        "        \"plt.show()\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Pairplot to visualize relationships between features\\n\",\n",
        "        \"sns.pairplot(real_estate_data)\\n\",\n",
        "        \"plt.suptitle(\\\"Pairplot of Features\\\")\\n\",\n",
        "        \"plt.show()\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Handle missing values\\n\",\n",
        "        \"# Check for missing values\\n\",\n",
        "        \"missing_values = real_estate_data.isnull().sum()\\n\",\n",
        "        \"print(\\\"\\\\nMissing values:\\\")\\n\",\n",
        "        \"print(missing_values)\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Drop rows with missing values\\n\",\n",
        "        \"real_estate_data.dropna(inplace=True)\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Handle duplicates\\n\",\n",
        "        \"# Check for duplicate rows\\n\",\n",
        "        \"duplicate_rows = real_estate_data.duplicated().sum()\\n\",\n",
        "        \"print(\\\"\\\\nNumber of duplicate rows:\\\", duplicate_rows)\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Drop duplicate rows\\n\",\n",
        "        \"real_estate_data.drop_duplicates(inplace=True)\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Print the shape of the cleaned dataset\\n\",\n",
        "        \"print(\\\"\\\\nShape of cleaned dataset after handling missing values and duplicates:\\\", real_estate_data.shape)\\n\",\n",
        "        \"\\n\",\n",
        "        \"\\n\"\n",
        "      ],\n",
        "      \"metadata\": {\n",
        "        \"colab\": {\n",
        "          \"base_uri\": \"https://localhost:8080/\",\n",
        "          \"height\": 1000\n",
        "        },\n",
        "        \"id\": \"e9MO2O_31EqW\",\n",
        "        \"outputId\": \"d15f82a5-339f-4f7e-81f4-5cd00749788b\"\n",
        "      },"
      ],
      "metadata": {
        "id": "MJJEnF-l1pgM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "{\n",
        "  \"nbformat\": 4,\n",
        "  \"nbformat_minor\": 0,\n",
        "  \"metadata\": {\n",
        "    \"colab\": {\n",
        "      \"provenance\": []\n",
        "    },\n",
        "    \"kernelspec\": {\n",
        "      \"name\": \"python3\",\n",
        "      \"display_name\": \"Python 3\"\n",
        "    },\n",
        "    \"language_info\": {\n",
        "      \"name\": \"python\"\n",
        "    }\n",
        "  },\n",
        "  \"cells\": [\n",
        "    {\n",
        "      \"cell_type\": \"code\",\n",
        "      \"execution_count\": 1,\n",
        "      \"metadata\": {\n",
        "        \"colab\": {\n",
        "          \"base_uri\": \"https://localhost:8080/\"\n",
        "        },\n",
        "        \"id\": \"JF4znRa6zv6s\",\n",
        "        \"outputId\": \"7f091e82-c5c6-42e6-f852-f2f215ed39b1\"\n",
        "      },\n",
        "      \"outputs\": [\n",
        "        {\n",
        "          \"output_type\": \"stream\",\n",
        "          \"name\": \"stdout\",\n",
        "          \"text\": [\n",
        "            \"Mounted at /content/drive\\n\"\n",
        "          ]\n",
        "        }\n",
        "      ],\n",
        "      \"source\": [\n",
        "        \"from google.colab import drive\\n\",\n",
        "        \"drive.mount('/content/drive')\"\n",
        "      ]\n",
        "    },\n",
        "    {\n",
        "      \"cell_type\": \"code\",\n",
        "      \"source\": [\n",
        "        \"import pandas as pd\\n\",\n",
        "        \"import seaborn as sns\\n\",\n",
        "        \"import matplotlib.pyplot as plt\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Load the dataset\\n\",\n",
        "        \"file_path = \\\"/content/drive/MyDrive/Real estate.csv\\\"\\n\",\n",
        "        \"real_estate_data = pd.read_csv(file_path)\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Display the first few rows of the dataset\\n\",\n",
        "        \"print(\\\"First few rows of the dataset:\\\")\\n\",\n",
        "        \"print(real_estate_data.head())\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Summary statistics of the dataset\\n\",\n",
        "        \"print(\\\"\\\\nSummary statistics of the dataset:\\\")\\n\",\n",
        "        \"print(real_estate_data.describe())\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Correlation matrix\\n\",\n",
        "        \"correlation_matrix = real_estate_data.corr()\\n\",\n",
        "        \"print(\\\"\\\\nCorrelation matrix:\\\")\\n\",\n",
        "        \"print(correlation_matrix)\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Visualizing correlations using a heatmap\\n\",\n",
        "        \"plt.figure(figsize=(10, 8))\\n\",\n",
        "        \"sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\\\".2f\\\")\\n\",\n",
        "        \"plt.title(\\\"Correlation Heatmap\\\")\\n\",\n",
        "        \"plt.show()\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Distribution of the target variable\\n\",\n",
        "        \"plt.figure(figsize=(8, 6))\\n\",\n",
        "        \"sns.histplot(real_estate_data['Y house price of unit area'], kde=True, color='blue')\\n\",\n",
        "        \"plt.title(\\\"Distribution of House Price of Unit Area\\\")\\n\",\n",
        "        \"plt.xlabel(\\\"House Price of Unit Area\\\")\\n\",\n",
        "        \"plt.ylabel(\\\"Frequency\\\")\\n\",\n",
        "        \"plt.show()\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Pairplot to visualize relationships between features\\n\",\n",
        "        \"sns.pairplot(real_estate_data)\\n\",\n",
        "        \"plt.suptitle(\\\"Pairplot of Features\\\")\\n\",\n",
        "        \"plt.show()\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Handle missing values\\n\",\n",
        "        \"# Check for missing values\\n\",\n",
        "        \"missing_values = real_estate_data.isnull().sum()\\n\",\n",
        "        \"print(\\\"\\\\nMissing values:\\\")\\n\",\n",
        "        \"print(missing_values)\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Drop rows with missing values\\n\",\n",
        "        \"real_estate_data.dropna(inplace=True)\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Handle duplicates\\n\",\n",
        "        \"# Check for duplicate rows\\n\",\n",
        "        \"duplicate_rows = real_estate_data.duplicated().sum()\\n\",\n",
        "        \"print(\\\"\\\\nNumber of duplicate rows:\\\", duplicate_rows)\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Drop duplicate rows\\n\",\n",
        "        \"real_estate_data.drop_duplicates(inplace=True)\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Print the shape of the cleaned dataset\\n\",\n",
        "        \"print(\\\"\\\\nShape of cleaned dataset after handling missing values and duplicates:\\\", real_estate_data.shape)\"\n",
        "      ],\n",
        "      \"metadata\": {\n",
        "        \"colab\": {\n",
        "          \"base_uri\": \"https://localhost:8080/\",\n",
        "          \"height\": 1000\n",
        "        },\n",
        "        \"id\": \"Vm-JMoLe828q\",\n",
        "        \"outputId\": \"bf0f670c-e49a-4f28-dbb1-2cd7b9532cae\"\n",
        "      },"
      ],
      "metadata": {
        "id": "Hp2uI1x_2o4a"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}